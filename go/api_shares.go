// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Du Map
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.10
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// SharesAPIController binds http requests to an api service and writes the service results to the http response
type SharesAPIController struct {
	service SharesAPIServicer
	errorHandler ErrorHandler
}

// SharesAPIOption for how the controller is set up.
type SharesAPIOption func(*SharesAPIController)

// WithSharesAPIErrorHandler inject ErrorHandler into controller
func WithSharesAPIErrorHandler(h ErrorHandler) SharesAPIOption {
	return func(c *SharesAPIController) {
		c.errorHandler = h
	}
}

// NewSharesAPIController creates a default api controller
func NewSharesAPIController(s SharesAPIServicer, opts ...SharesAPIOption) *SharesAPIController {
	controller := &SharesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SharesAPIController
func (c *SharesAPIController) Routes() Routes {
	return Routes{
		"ChangeShare": Route{
			strings.ToUpper("Put"),
			"/shares/{category}/{shareId}",
			c.ChangeShare,
		},
		"GetShares": Route{
			strings.ToUpper("Get"),
			"/shares",
			c.GetShares,
		},
	}
}

// ChangeShare - 
func (c *SharesAPIController) ChangeShare(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	categoryParam := params["category"]
	if categoryParam == "" {
		c.errorHandler(w, r, &RequiredError{"category"}, nil)
		return
	}
	shareIdParam, err := parseNumericParameter[float32](
		params["shareId"],
		WithRequire[float32](parseFloat32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "shareId", Err: err}, nil)
		return
	}
	var actionParam string
	if query.Has("action") {
		param := query.Get("action")

		actionParam = param
	} else {
	}
	result, err := c.service.ChangeShare(r.Context(), categoryParam, shareIdParam, actionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetShares - 
func (c *SharesAPIController) GetShares(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetShares(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
