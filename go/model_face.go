// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Du Map
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.10
 */

package openapi




type Face struct {

	TileId float32 `json:"tileId"`

	Owner string `json:"owner,omitempty"`

	Own bool `json:"own"`

	Center []float64 `json:"center,omitempty"`

	Vertices [][]float64 `json:"vertices,omitempty"`

	DuEntityId float32 `json:"duEntityId,omitempty"`

	Latitude float64 `json:"latitude,omitempty"`

	Longitude float64 `json:"longitude,omitempty"`

	Scan Scan `json:"scan,omitempty"`

	Color RgbColor `json:"color,omitempty"`
}

// AssertFaceRequired checks if the required fields are not zero-ed
func AssertFaceRequired(obj Face) error {
	elements := map[string]interface{}{
		"tileId": obj.TileId,
		"own": obj.Own,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertScanRequired(obj.Scan); err != nil {
		return err
	}
	if err := AssertRgbColorRequired(obj.Color); err != nil {
		return err
	}
	return nil
}

// AssertFaceConstraints checks if the values respects the defined constraints
func AssertFaceConstraints(obj Face) error {
	if err := AssertScanConstraints(obj.Scan); err != nil {
		return err
	}
	if err := AssertRgbColorConstraints(obj.Color); err != nil {
		return err
	}
	return nil
}
