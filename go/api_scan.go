// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Du Map
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.10
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// ScanAPIController binds http requests to an api service and writes the service results to the http response
type ScanAPIController struct {
	service ScanAPIServicer
	errorHandler ErrorHandler
}

// ScanAPIOption for how the controller is set up.
type ScanAPIOption func(*ScanAPIController)

// WithScanAPIErrorHandler inject ErrorHandler into controller
func WithScanAPIErrorHandler(h ErrorHandler) ScanAPIOption {
	return func(c *ScanAPIController) {
		c.errorHandler = h
	}
}

// NewScanAPIController creates a default api controller
func NewScanAPIController(s ScanAPIServicer, opts ...ScanAPIOption) *ScanAPIController {
	controller := &ScanAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ScanAPIController
func (c *ScanAPIController) Routes() Routes {
	return Routes{
		"SaveScan": Route{
			strings.ToUpper("Post"),
			"/scan",
			c.SaveScan,
		},
	}
}

// SaveScan - 
func (c *ScanAPIController) SaveScan(w http.ResponseWriter, r *http.Request) {
	bodyParam := Scan{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertScanRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertScanConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SaveScan(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
