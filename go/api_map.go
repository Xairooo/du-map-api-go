// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Du Map
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.10
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// MapAPIController binds http requests to an api service and writes the service results to the http response
type MapAPIController struct {
	service MapAPIServicer
	errorHandler ErrorHandler
}

// MapAPIOption for how the controller is set up.
type MapAPIOption func(*MapAPIController)

// WithMapAPIErrorHandler inject ErrorHandler into controller
func WithMapAPIErrorHandler(h ErrorHandler) MapAPIOption {
	return func(c *MapAPIController) {
		c.errorHandler = h
	}
}

// NewMapAPIController creates a default api controller
func NewMapAPIController(s MapAPIServicer, opts ...MapAPIOption) *MapAPIController {
	controller := &MapAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the MapAPIController
func (c *MapAPIController) Routes() Routes {
	return Routes{
		"GetFaces": Route{
			strings.ToUpper("Get"),
			"/faces",
			c.GetFaces,
		},
		"UpdateTile": Route{
			strings.ToUpper("Put"),
			"/face/{planet}/{tileId}",
			c.UpdateTile,
		},
	}
}

// GetFaces - 
func (c *MapAPIController) GetFaces(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var tileIdParam int64
	if query.Has("tileId") {
		param, err := parseNumericParameter[int64](
			query.Get("tileId"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "tileId", Err: err}, nil)
			return
		}

		tileIdParam = param
	} else {
	}
	var celestialIdParam int64
	if query.Has("celestialId") {
		param, err := parseNumericParameter[int64](
			query.Get("celestialId"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "celestialId", Err: err}, nil)
			return
		}

		celestialIdParam = param
	} else {
	}
	var scaleParam int64
	if query.Has("scale") {
		param, err := parseNumericParameter[int64](
			query.Get("scale"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "scale", Err: err}, nil)
			return
		}

		scaleParam = param
	} else {
	}
	result, err := c.service.GetFaces(r.Context(), tileIdParam, celestialIdParam, scaleParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateTile - 
func (c *MapAPIController) UpdateTile(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	planetParam := params["planet"]
	if planetParam == "" {
		c.errorHandler(w, r, &RequiredError{"planet"}, nil)
		return
	}
	tileIdParam, err := parseNumericParameter[int64](
		params["tileId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "tileId", Err: err}, nil)
		return
	}
	result, err := c.service.UpdateTile(r.Context(), planetParam, tileIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
